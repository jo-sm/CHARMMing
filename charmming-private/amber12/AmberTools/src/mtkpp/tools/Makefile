# Makefile.in generated by automake 1.11.1 from Makefile.am.
# tools/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




pkgdatadir = $(datadir)/MTKpp
pkgincludedir = $(includedir)/MTKpp
pkglibdir = $(libdir)/MTKpp
pkglibexecdir = $(libexecdir)/MTKpp
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
bin_PROGRAMS = MTKppConstants$(EXEEXT) capActiveSite$(EXEEXT) \
	frcmod2xml$(EXEEXT) func$(EXEEXT) hybrid$(EXEEXT) mmE$(EXEEXT) \
	prep2xml$(EXEEXT) protonator$(EXEEXT) sequenceAligner$(EXEEXT) \
	stats$(EXEEXT) superimposer$(EXEEXT) stdLib2Sdf$(EXEEXT) \
	pdbSearcher$(EXEEXT) MCPB$(EXEEXT)
subdir = tools
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/scripts/config/qt.m4 \
	$(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
PROGRAMS = $(bin_PROGRAMS)
am_MCPB_OBJECTS = MCPB.$(OBJEXT)
MCPB_OBJECTS = $(am_MCPB_OBJECTS)
am__DEPENDENCIES_1 =
#am__DEPENDENCIES_2 = $(am__DEPENDENCIES_1)
MCPB_DEPENDENCIES = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_2) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
MCPB_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) \
	$(MCPB_LDFLAGS) $(LDFLAGS) -o $@
am_MTKppConstants_OBJECTS = MTKppConstants.$(OBJEXT)
MTKppConstants_OBJECTS = $(am_MTKppConstants_OBJECTS)
MTKppConstants_DEPENDENCIES = $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_2) \
	$(am__DEPENDENCIES_1)
MTKppConstants_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(MTKppConstants_LDFLAGS) $(LDFLAGS) -o $@
am_capActiveSite_OBJECTS = capActiveSite.$(OBJEXT)
capActiveSite_OBJECTS = $(am_capActiveSite_OBJECTS)
capActiveSite_DEPENDENCIES = $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_2) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
capActiveSite_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(capActiveSite_LDFLAGS) $(LDFLAGS) -o $@
am_frcmod2xml_OBJECTS = frcmod2xml.$(OBJEXT)
frcmod2xml_OBJECTS = $(am_frcmod2xml_OBJECTS)
frcmod2xml_DEPENDENCIES = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_2) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
frcmod2xml_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(frcmod2xml_LDFLAGS) $(LDFLAGS) -o $@
am_func_OBJECTS = func.$(OBJEXT)
func_OBJECTS = $(am_func_OBJECTS)
func_DEPENDENCIES = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_2) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
func_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) \
	$(func_LDFLAGS) $(LDFLAGS) -o $@
am_hybrid_OBJECTS = hybrid.$(OBJEXT)
hybrid_OBJECTS = $(am_hybrid_OBJECTS)
hybrid_DEPENDENCIES = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_2) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
hybrid_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) \
	$(hybrid_LDFLAGS) $(LDFLAGS) -o $@
am_mmE_OBJECTS = mmE.$(OBJEXT)
mmE_OBJECTS = $(am_mmE_OBJECTS)
mmE_DEPENDENCIES = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_2) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
mmE_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(mmE_LDFLAGS) \
	$(LDFLAGS) -o $@
am_pdbSearcher_OBJECTS = pdbSearcher.$(OBJEXT)
pdbSearcher_OBJECTS = $(am_pdbSearcher_OBJECTS)
pdbSearcher_DEPENDENCIES = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_2) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
pdbSearcher_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(pdbSearcher_LDFLAGS) $(LDFLAGS) -o $@
am_prep2xml_OBJECTS = prep2xml.$(OBJEXT)
prep2xml_OBJECTS = $(am_prep2xml_OBJECTS)
prep2xml_DEPENDENCIES = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_2) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
prep2xml_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(prep2xml_LDFLAGS) $(LDFLAGS) -o $@
am_protonator_OBJECTS = protonator.$(OBJEXT)
protonator_OBJECTS = $(am_protonator_OBJECTS)
protonator_DEPENDENCIES = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_2) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
protonator_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(protonator_LDFLAGS) $(LDFLAGS) -o $@
am_sequenceAligner_OBJECTS = sequenceAligner.$(OBJEXT)
sequenceAligner_OBJECTS = $(am_sequenceAligner_OBJECTS)
sequenceAligner_DEPENDENCIES = $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_2) \
	$(am__DEPENDENCIES_1)
sequenceAligner_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(sequenceAligner_LDFLAGS) $(LDFLAGS) -o $@
am_stats_OBJECTS = stats.$(OBJEXT)
stats_OBJECTS = $(am_stats_OBJECTS)
stats_DEPENDENCIES = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_2) $(am__DEPENDENCIES_1)
stats_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) \
	$(stats_LDFLAGS) $(LDFLAGS) -o $@
am_stdLib2Sdf_OBJECTS = stdLib2Sdf.$(OBJEXT)
stdLib2Sdf_OBJECTS = $(am_stdLib2Sdf_OBJECTS)
stdLib2Sdf_DEPENDENCIES = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_2) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
stdLib2Sdf_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(stdLib2Sdf_LDFLAGS) $(LDFLAGS) -o $@
am_superimposer_OBJECTS = superimposer.$(OBJEXT)
superimposer_OBJECTS = $(am_superimposer_OBJECTS)
superimposer_DEPENDENCIES = $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_2) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
superimposer_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(superimposer_LDFLAGS) $(LDFLAGS) -o $@
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(MCPB_SOURCES) $(MTKppConstants_SOURCES) \
	$(capActiveSite_SOURCES) $(frcmod2xml_SOURCES) $(func_SOURCES) \
	$(hybrid_SOURCES) $(mmE_SOURCES) $(pdbSearcher_SOURCES) \
	$(prep2xml_SOURCES) $(protonator_SOURCES) \
	$(sequenceAligner_SOURCES) $(stats_SOURCES) \
	$(stdLib2Sdf_SOURCES) $(superimposer_SOURCES)
DIST_SOURCES = $(MCPB_SOURCES) $(MTKppConstants_SOURCES) \
	$(capActiveSite_SOURCES) $(frcmod2xml_SOURCES) $(func_SOURCES) \
	$(hybrid_SOURCES) $(mmE_SOURCES) $(pdbSearcher_SOURCES) \
	$(prep2xml_SOURCES) $(protonator_SOURCES) \
	$(sequenceAligner_SOURCES) $(stats_SOURCES) \
	$(stdLib2Sdf_SOURCES) $(superimposer_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/tim/amber12/AmberTools/src/mtkpp/missing --run aclocal-1.11
AMTAR = ${SHELL} /home/tim/amber12/AmberTools/src/mtkpp/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /home/tim/amber12/AmberTools/src/mtkpp/missing --run autoconf
AUTOHEADER = ${SHELL} /home/tim/amber12/AmberTools/src/mtkpp/missing --run autoheader
AUTOMAKE = ${SHELL} /home/tim/amber12/AmberTools/src/mtkpp/missing --run automake-1.11
AWK = mawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -O2 -fPIC -DHAVE_ZLIB
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS =  -DNDEBUG -DUSE_TINYXML -DTIXML_USE_STL -DC99_OK -O2 -fPIC -DHAVE_ZLIB
CXXLD = $(CXX)
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DLLTOOL = false
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
FGREP = /bin/grep -F
FLIBS =  -lz
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LD = /usr/bin/ld -m elf_x86_64
LDFLAGS = 
LIBDIR = 
LIBOBJS = 
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIBTOOL_DEPS = ./ltmain.sh
LIPO = 
LN_S = ln -s
LTLIBOBJS = 
MAINT = #
MAKEINFO = ${SHELL} /home/tim/amber12/AmberTools/src/mtkpp/missing --run makeinfo
MANIFEST_TOOL = :
MKDIR_P = /bin/mkdir -p
MOC = 
NM = /usr/bin/nm -B
NMEDIT = 
OBJDUMP = objdump
OBJEXT = o
OTOOL = 
OTOOL64 = 
PACKAGE = MTKpp
PACKAGE_BUGREPORT = martin.b.peters@gmail.com
PACKAGE_NAME = MTK++
PACKAGE_STRING = MTK++ 0.2.0
PACKAGE_TARNAME = MTKpp
PACKAGE_URL = 
PACKAGE_VERSION = 0.2.0
PATH_SEPARATOR = :
POW_LIB = 
PYTHON = /usr/bin/python
QT_CXXFLAGS = 
QT_DEFINES = 
QT_INCPATH = 
QT_LIBS = 
RANLIB = ranlib
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/bash
STRIP = strip
SWIG = 
UIC = 
VERSION = 0.2.0
XMKMF = 
abs_builddir = /home/tim/amber12/AmberTools/src/mtkpp/tools
abs_srcdir = /home/tim/amber12/AmberTools/src/mtkpp/tools
abs_top_builddir = /home/tim/amber12/AmberTools/src/mtkpp
abs_top_srcdir = /home/tim/amber12/AmberTools/src/mtkpp
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = 
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
boost_inc = /home/tim/amber12/AmberTools/src/boost-1.38.0
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
defines_string =  -DUSE_TINYXML -DTIXML_USE_STL-DC99_OK  -DLINUX  -DHAVE_ZLIB
diff_ok = yes
docdir = /home/tim/amber12/doc
dot_ok = no
doxygen_ok = no
dvidir = ${docdir}
dvips_ok = no
exec_prefix = ${prefix}
gs_ok = no
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
includedir = /home/tim/amber12/include/mtkpp
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/tim/amber12/AmberTools/src/mtkpp/install-sh
latex_ok = no
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
log4cxx_inc = 
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
platform = LINUX
prefix = /home/tim/amber12
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
xerces_path = 

##### FLAGS #####
##QT_LF = -framework QtCore -framework QtXml
# tester_LDFLAGS = -bind_at_load $(QT_LF) $(tester_ldflags_tmp)
MTKppConstants_LDFLAGS = $(MTKppConstants_ldflags_tmp)
#MTKppConstants_LDFLAGS = -bind_at_load $(QT_LF) $(MTKppConstants_ldflags_tmp)
# tester_LDFLAGS = $(tester_ldflags_tmp)
#LOG4CXX_LD = -L/lib
#LOG4CXX_LIB = -llog4cxx
#XERCES_LD = -L/lib
#XERCES_LIB = -lxerces-c
#tmpQT_INCPATH = $(QT_INCPATH)
#tmpQT_LIBS = $(QT_LIBS)
DIAGNOSTICS_LD = -L$(abs_top_builddir)/src/Diagnostics
DIAGNOSTICS_LIB = -lDiagnostics
MOLECULE_LD = -L$(top_builddir)/src/Molecule
MOLECULE_LIB = -lMolecule
LOG_LD = -L$(top_builddir)/src/Log
LOG_LIB = -lLog
GRAPH_LD = -L$(top_builddir)/src/Graph
GRAPH_LIB = -lGraph
GA_LD = -L$(top_builddir)/src/GA
GA_LIB = -lGA
MM_LD = -L$(top_builddir)/src/MM
MM_LIB = -lMM
MINIMIZERS_LD = -L$(top_builddir)/src/Minimizers
MINIMIZERS_LIB = -lMinimizers
PARSERS_LD = -L$(top_builddir)/src/Parsers
PARSERS_LIB = -lParsers
STATS_LD = -L$(top_builddir)/src/Statistics
STATS_LIB = -lStatistics
TINYXML_LD = -L$(top_builddir)/src/tinyxml
TINYXML_LIB = -ltinyxml

# INCLUDES = -I/home/tim/amber12/AmberTools/src/boost-1.38.0 -I/include  -I$(top_srcdir)/src -I$(top_srcdir)/include -I$(top_srcdir)/src/tinyxml -I$(top_srcdir)/src/Parsers -I$(top_srcdir)/src/Statistics -I$(top_srcdir)/src/Utils $(QT_INCPATH)
INCLUDES = -I/home/tim/amber12/AmberTools/src/boost-1.38.0 -I/include -I$(top_srcdir)/src -I$(top_srcdir)/include $(tmpQT_INCPATH) -I$(top_srcdir)/src/eigen3b2
#               tester

#### MTKPPCONSTANTS ####
MTKppConstants_SOURCES = MTKppConstants.cpp
MTKppConstants_ldflags_tmp = $(DIAGNOSTICS_LD) $(MOLECULE_LD) $(LOG_LD) $(GRAPH_LD) $(GA_LD) $(PARSERS_LD) $(TINYXML_LD) $(XERCES_LD) $(tmpQT_LIBS) $(LOG4CXX_LD)
MTKppConstants_LDADD = $(DIAGNOSTICS_LIB) $(MOLECULE_LIB) $(LOG_LIB) $(GRAPH_LIB) $(GA_LIB) $(PARSERS_LIB) $(TINYXML_LIB) $(XERCES_LIB) $(tmpQT_LIBS) $(LOG4CXX_LIB)

#### TESTER ####
# tester_SOURCES = tester.cpp
# tester_ldflags_tmp = $(DIAGNOSTICS_LD) $(MOLECULE_LD) $(LOG_LD) $(GRAPH_LD) $(GA_LD) $(PARSERS_LD) $(TINYXML_LD) $(XERCES_LD) $(tmpQT_LIBS) $(LOG4CXX_LD)
# tester_LDADD = $(DIAGNOSTICS_LIB) $(MOLECULE_LIB) $(LOG_LIB) $(GRAPH_LIB) $(GA_LIB) $(PARSERS_LIB) $(TINYXML_LIB) $(XERCES_LIB)  $(tmpQT_LIBS) $(LOG4CXX_LIB)

#### CAPACTIVESITE ####
capActiveSite_SOURCES = capActiveSite.cpp
capActiveSite_LDFLAGS = $(DIAGNOSTICS_LD) $(MOLECULE_LD) $(LOG_LD) $(GRAPH_LD) $(PARSERS_LD) $(TINYXML_LD) $(XERCES_LD) $(LOG4CXX_LD)
capActiveSite_LDADD = $(DIAGNOSTICS_LIB) $(MOLECULE_LIB) $(LOG_LIB) $(GRAPH_LIB) $(PARSERS_LIB) $(TINYXML_LIB) $(XERCES_LIB) $(tmpQT_LIBS) $(LOG4CXX_LIB) ${FLIBS}

#### FRCMOD2XML ####
frcmod2xml_SOURCES = frcmod2xml.cpp
frcmod2xml_LDFLAGS = $(DIAGNOSTICS_LD) $(MOLECULE_LD) $(LOG_LD) $(GRAPH_LD) $(PARSERS_LD) $(TINYXML_LD) $(XERCES_LD) $(LOG4CXX_LD)
frcmod2xml_LDADD = $(DIAGNOSTICS_LIB) $(MOLECULE_LIB) $(LOG_LIB) $(GRAPH_LIB) $(PARSERS_LIB) $(TINYXML_LIB) $(XERCES_LIB) $(tmpQT_LIBS) $(LOG4CXX_LIB) ${FLIBS}

#### FUNC ####
func_SOURCES = func.cpp
func_LDFLAGS = $(DIAGNOSTICS_LD) $(MOLECULE_LD) $(LOG_LD) $(GRAPH_LD) $(GA_LD) $(PARSERS_LD) $(TINYXML_LD) $(XERCES_LD) $(LOG4CXX_LD)
func_LDADD = $(DIAGNOSTICS_LIB) $(MOLECULE_LIB) $(LOG_LIB) $(GRAPH_LIB) $(GA_LIB) $(PARSERS_LIB) $(TINYXML_LIB) $(XERCES_LIB) $(tmpQT_LIBS) $(LOG4CXX_LIB) ${FLIBS}

#### HYBRID ####
hybrid_SOURCES = hybrid.cpp
hybrid_LDFLAGS = $(DIAGNOSTICS_LD) $(MOLECULE_LD) $(LOG_LD) $(GRAPH_LD) $(GA_LD) $(PARSERS_LD) $(TINYXML_LD) $(XERCES_LD) $(LOG4CXX_LD)
hybrid_LDADD = $(DIAGNOSTICS_LIB) $(MOLECULE_LIB) $(LOG_LIB) $(GRAPH_LIB) $(GA_LIB) $(PARSERS_LIB) $(TINYXML_LIB) $(XERCES_LIB) $(tmpQT_LIBS) $(LOG4CXX_LIB) ${FLIBS}

#### MME ####
mmE_SOURCES = mmE.cpp
mmE_LDFLAGS = $(DIAGNOSTICS_LD) $(MOLECULE_LD) $(MM_LD) $(MINIMIZERS_LD) $(LOG_LD) $(PARSERS_LD) $(TINYXML_LD) $(XERCES_LD) $(LOG4CXX_LD)
mmE_LDADD = $(DIAGNOSTICS_LIB) $(MOLECULE_LIB) $(MM_LIB) $(MINIMIZERS_LIB) $(LOG_LIB) $(PARSERS_LIB) $(TINYXML_LIB) $(XERCES_LIB) $(tmpQT_LIBS) $(LOG4CXX_LIB) ${FLIBS}

#### PREP2XML ####
prep2xml_SOURCES = prep2xml.cpp
prep2xml_LDFLAGS = $(DIAGNOSTICS_LD) $(MOLECULE_LD) $(LOG_LD) $(GRAPH_LD) $(PARSERS_LD) $(TINYXML_LD) $(XERCES_LD) $(LOG4CXX_LD)
prep2xml_LDADD = $(DIAGNOSTICS_LIB) $(MOLECULE_LIB) $(LOG_LIB) $(GRAPH_LIB) $(PARSERS_LIB) $(TINYXML_LIB) $(XERCES_LIB) $(tmpQT_LIBS) $(LOG4CXX_LIB) ${FLIBS}

#### PROTONATOR ####
protonator_SOURCES = protonator.cpp
protonator_LDFLAGS = $(DIAGNOSTICS_LD) $(MOLECULE_LD) $(LOG_LD) $(GRAPH_LD) $(GA_LD) $(PARSERS_LD) $(TINYXML_LD) $(XERCES_LD) $(LOG4CXX_LD)
protonator_LDADD = $(DIAGNOSTICS_LIB) $(MOLECULE_LIB) $(LOG_LIB) $(GRAPH_LIB) $(GA_LIB) $(PARSERS_LIB) $(TINYXML_LIB) $(XERCES_LIB) $(tmpQT_LIBS) $(LOG4CXX_LIB) ${FLIBS}

#### SEQUENCEALIGNER ####
sequenceAligner_SOURCES = sequenceAligner.cpp
sequenceAligner_LDFLAGS = $(DIAGNOSTICS_LD) $(MOLECULE_LD) $(STATS_LD) $(LOG_LD) $(GRAPH_LD) $(GA_LD) $(PARSERS_LD) $(TINYXML_LD) $(XERCES_LD) $(LOG4CXX_LD)
sequenceAligner_LDADD = $(DIAGNOSTICS_LIB) $(MOLECULE_LIB) $(STATS_LIB) $(LOG_LIB) $(GRAPH_LIB) $(GA_LIB) $(PARSERS_LIB) $(TINYXML_LIB) $(XERCES_LIB) $(LOG4CXX_LIB) $(tmpQT_LIBS) ${FLIBS}

#### STATS ####
stats_SOURCES = stats.cpp
stats_LDFLAGS = $(DIAGNOSTICS_LD) $(MOLECULE_LD) $(LOG_LD) $(STATS_LD) $(GRAPH_LD) $(GA_LD) $(PARSERS_LD) $(TINYXML_LD) $(XERCES_LD) $(LOG4CXX_LD)
stats_LDADD = $(DIAGNOSTICS_LIB) $(MOLECULE_LIB) $(LOG_LIB) $(STATS_LIB) $(GRAPH_LIB) $(GA_LIB) $(PARSERS_LIB) $(TINYXML_LIB) $(XERCES_LIB) $(LOG4CXX_LIB) $(tmpQT_LIBS) ${FLIBS}

#### SUPERIMPOSER ####
superimposer_SOURCES = superimposer.cpp
superimposer_LDFLAGS = $(DIAGNOSTICS_LD) $(MOLECULE_LD) $(LOG_LD) $(GRAPH_LD) $(GA_LD) $(PARSERS_LD) $(TINYXML_LD) $(XERCES_LD) $(LOG4CXX_LD)
superimposer_LDADD = $(DIAGNOSTICS_LIB) $(MOLECULE_LIB) $(LOG_LIB) $(GRAPH_LIB) $(GA_LIB) $(PARSERS_LIB) $(TINYXML_LIB) $(XERCES_LIB) $(tmpQT_LIBS) $(LOG4CXX_LIB) ${FLIBS}

#### STDLIB2SDF ####
stdLib2Sdf_SOURCES = stdLib2Sdf.cpp
stdLib2Sdf_LDFLAGS = $(DIAGNOSTICS_LD) $(MOLECULE_LD) $(LOG_LD) $(GRAPH_LD) $(GA_LD) $(PARSERS_LD) $(TINYXML_LD) $(XERCES_LD) $(LOG4CXX_LD)
stdLib2Sdf_LDADD = $(DIAGNOSTICS_LIB) $(MOLECULE_LIB) $(LOG_LIB) $(GRAPH_LIB) $(GA_LIB) $(PARSERS_LIB) $(TINYXML_LIB) $(XERCES_LIB) $(tmpQT_LIBS) $(LOG4CXX_LIB) ${FLIBS}

#### PDBSEARCHER ####
pdbSearcher_SOURCES = pdbSearcher.cpp
pdbSearcher_LDFLAGS = $(DIAGNOSTICS_LD) $(MOLECULE_LD) $(MM_LD) $(MINIMIZERS_LD) $(LOG_LD) $(GRAPH_LD) $(PARSERS_LD) $(TINYXML_LD) $(XERCES_LD) $(LOG4CXX_LD)
pdbSearcher_LDADD = $(DIAGNOSTICS_LIB) $(MOLECULE_LIB) $(MM_LIB) $(MINIMIZERS_LIB) $(LOG_LIB) $(GRAPH_LIB) $(PARSERS_LIB) $(TINYXML_LIB) $(XERCES_LIB) $(tmpQT_LIBS) $(LOG4CXX_LIB) ${FLIBS}

#### MCPB ####
MCPB_SOURCES = MCPB.cpp
MCPB_LDFLAGS = $(DIAGNOSTICS_LD) $(MOLECULE_LD) $(MM_LD) $(MINIMIZERS_LD) $(LOG_LD) $(GRAPH_LD) $(STATS_LD) $(PARSERS_LD) $(TINYXML_LD) $(XERCES_LD) $(LOG4CXX_LD)
MCPB_LDADD = $(DIAGNOSTICS_LIB) $(MOLECULE_LIB) $(MM_LIB) $(MINIMIZERS_LIB) $(LOG_LIB) $(GRAPH_LIB) $(STATS_LIB) $(PARSERS_LIB) $(TINYXML_LIB) $(XERCES_LIB) $(tmpQT_LIBS) $(LOG4CXX_LIB) ${FLIBS}
all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .lo .o .obj
$(srcdir)/Makefile.in: # $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu tools/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu tools/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: # $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): # $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p || test -f $$p1; \
	  then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	    echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	    $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' `; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list
MCPB$(EXEEXT): $(MCPB_OBJECTS) $(MCPB_DEPENDENCIES) 
	@rm -f MCPB$(EXEEXT)
	$(MCPB_LINK) $(MCPB_OBJECTS) $(MCPB_LDADD) $(LIBS)
MTKppConstants$(EXEEXT): $(MTKppConstants_OBJECTS) $(MTKppConstants_DEPENDENCIES) 
	@rm -f MTKppConstants$(EXEEXT)
	$(MTKppConstants_LINK) $(MTKppConstants_OBJECTS) $(MTKppConstants_LDADD) $(LIBS)
capActiveSite$(EXEEXT): $(capActiveSite_OBJECTS) $(capActiveSite_DEPENDENCIES) 
	@rm -f capActiveSite$(EXEEXT)
	$(capActiveSite_LINK) $(capActiveSite_OBJECTS) $(capActiveSite_LDADD) $(LIBS)
frcmod2xml$(EXEEXT): $(frcmod2xml_OBJECTS) $(frcmod2xml_DEPENDENCIES) 
	@rm -f frcmod2xml$(EXEEXT)
	$(frcmod2xml_LINK) $(frcmod2xml_OBJECTS) $(frcmod2xml_LDADD) $(LIBS)
func$(EXEEXT): $(func_OBJECTS) $(func_DEPENDENCIES) 
	@rm -f func$(EXEEXT)
	$(func_LINK) $(func_OBJECTS) $(func_LDADD) $(LIBS)
hybrid$(EXEEXT): $(hybrid_OBJECTS) $(hybrid_DEPENDENCIES) 
	@rm -f hybrid$(EXEEXT)
	$(hybrid_LINK) $(hybrid_OBJECTS) $(hybrid_LDADD) $(LIBS)
mmE$(EXEEXT): $(mmE_OBJECTS) $(mmE_DEPENDENCIES) 
	@rm -f mmE$(EXEEXT)
	$(mmE_LINK) $(mmE_OBJECTS) $(mmE_LDADD) $(LIBS)
pdbSearcher$(EXEEXT): $(pdbSearcher_OBJECTS) $(pdbSearcher_DEPENDENCIES) 
	@rm -f pdbSearcher$(EXEEXT)
	$(pdbSearcher_LINK) $(pdbSearcher_OBJECTS) $(pdbSearcher_LDADD) $(LIBS)
prep2xml$(EXEEXT): $(prep2xml_OBJECTS) $(prep2xml_DEPENDENCIES) 
	@rm -f prep2xml$(EXEEXT)
	$(prep2xml_LINK) $(prep2xml_OBJECTS) $(prep2xml_LDADD) $(LIBS)
protonator$(EXEEXT): $(protonator_OBJECTS) $(protonator_DEPENDENCIES) 
	@rm -f protonator$(EXEEXT)
	$(protonator_LINK) $(protonator_OBJECTS) $(protonator_LDADD) $(LIBS)
sequenceAligner$(EXEEXT): $(sequenceAligner_OBJECTS) $(sequenceAligner_DEPENDENCIES) 
	@rm -f sequenceAligner$(EXEEXT)
	$(sequenceAligner_LINK) $(sequenceAligner_OBJECTS) $(sequenceAligner_LDADD) $(LIBS)
stats$(EXEEXT): $(stats_OBJECTS) $(stats_DEPENDENCIES) 
	@rm -f stats$(EXEEXT)
	$(stats_LINK) $(stats_OBJECTS) $(stats_LDADD) $(LIBS)
stdLib2Sdf$(EXEEXT): $(stdLib2Sdf_OBJECTS) $(stdLib2Sdf_DEPENDENCIES) 
	@rm -f stdLib2Sdf$(EXEEXT)
	$(stdLib2Sdf_LINK) $(stdLib2Sdf_OBJECTS) $(stdLib2Sdf_LDADD) $(LIBS)
superimposer$(EXEEXT): $(superimposer_OBJECTS) $(superimposer_DEPENDENCIES) 
	@rm -f superimposer$(EXEEXT)
	$(superimposer_LINK) $(superimposer_OBJECTS) $(superimposer_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/MCPB.Po
include ./$(DEPDIR)/MTKppConstants.Po
include ./$(DEPDIR)/capActiveSite.Po
include ./$(DEPDIR)/frcmod2xml.Po
include ./$(DEPDIR)/func.Po
include ./$(DEPDIR)/hybrid.Po
include ./$(DEPDIR)/mmE.Po
include ./$(DEPDIR)/pdbSearcher.Po
include ./$(DEPDIR)/prep2xml.Po
include ./$(DEPDIR)/protonator.Po
include ./$(DEPDIR)/sequenceAligner.Po
include ./$(DEPDIR)/stats.Po
include ./$(DEPDIR)/stdLib2Sdf.Po
include ./$(DEPDIR)/superimposer.Po

.cpp.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LTCXXCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic clean-libtool clean-local \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic clean-libtool clean-local ctags distclean \
	distclean-compile distclean-generic distclean-libtool \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-binPROGRAMS install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags uninstall uninstall-am uninstall-binPROGRAMS


##### CLEAN UP #####
clean-local:
	rm -f *.tmp

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
