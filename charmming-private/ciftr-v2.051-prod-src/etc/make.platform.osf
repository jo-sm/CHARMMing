##########################################################################
##
##  File:    make.platform.osf
##  Purpose: This file is an OSF Tru64 platform makefile.
##
##########################################################################

#-----Lexer and Parser section-------------------------------------------#

# Lexer executable
LEX=flex

# Lexer flags
LEXFLAGS=-Cfr -L

# Parser executable
YACC=bison

# Parser flags
YACCFLAGS=-d -v -l

#------------------------------------------------------------------------#

#-----Compilers section--------------------------------------------------#

## ABI
## This part defines an application binary interface to be used with the
## compiler suite.
## For OSF platform set this in order to support all portable features of
## the IEEE Standard for Binary Floating-Point Arithmetic
## (ANSI/IEEE Standard 754-1985), including the treatment of denormalized
## numbers, NaNs, infinities, and the handling of error cases.
ABI=-ieee

## Warnings flags
## This part defines warnings related flags

# WARNINGS_AS_ERRORS defines flags to instruct all compilers to treat all
# warnings as errors.
# RCSB compiler does not support this feature.
WARNINGS_AS_ERRORS=

# ALL_WARNINGS defines flags to instruct all compilers to report all
# warnings.
# RCSB compiler does not support this feature.
ALL_WARNINGS=

# NO_DEPRECATED defines flags to instruct C++ compiler not to report
# warnings about deprecated constructs still used in C++ code.
# This is not used on OSF platform.
NO_DEPRECATED=

# Collect all warnings related flags
WARNINGS=$(WARNINGS_AS_ERRORS) $(ALL_WARNINGS) $(NO_DEPRECATED)

## Platform specifics
## This part defines platform specific information
 
# Endianess.
# Should be defined only for big endian platforms. Otherwise
# it must be left undefined, which indicates little endian platform.
# OSF is a little endian platform.
#ENDIANESS=-DBIG_ENDIAN_PLATFORM
 
# OS indicator. Should be defined only if SunOS is the platform
# Not set since this is not SunOS platform.
#PLATFORM_OS=-DSUN_OS
 
# Collect all platform related flags
PLATFORM=$(ENDIANESS) $(PLATFORM_OS)

## Compiler capabilities/restrictions related defines
## This part defines variables based on the capabilities or restrictions
## of the compiler suite used on the platform.

# If STRCASECMP_OPTION is defined, that indicates that the compiler
# suite/supporting libraries support strcasecmp() function.
# Compiler supports this, so this is defined.
STRCASECMP_OPTION=-DHAVE_STRCASECMP

# If INCL_TEMPLATE_SRC_OPTION is defined, that indicates that
# compiler must include template method definition in template
# header files in order to properly compile templates.
# Not needed with OSF compiler, so this is undefined.
#INCL_TEMPLATE_SRC_OPTION=-DINCL_TEMPLATE_SRC

# If PLACEMENT_NEW_OPTION is defined, that indicates that the compiler
# suite/supporting libraries support placement new/delete operators.
# OSF compiler does not support this, so this is undefined.
#PLACEMENT_NEW_OPTION=-DHAVE_PLACEMENT_NEW

# Collect all compiler capabilities/restrictions
COMPILER=$(STRCASECMP_OPTION) $(INCL_TEMPLATE_SRC_OPTION) \
  $(PLACEMENT_NEW_OPTION) -tlocal

# Collect all global defines
GDEFINES=$(PLATFORM) $(COMPILER)

# Collect all defines from global defines and defines specified in
# module makefile
DEFINES=$(GDEFINES) $(LDEFINES)

## Global include directories
GINCLUDES= 

# Collect all include directories from global include directories and
# include directories specified in module makefile
INCLUDES=$(LINCLUDES) $(GINCLUDES) 

## C compiler
## This part defines C compiler information

# C compiler executable
CC=cc

# C compiler ANSI/NON-ANSI flags
ANSI_C_FLAG=
NON_ANSI_C_FLAG=-noansi_alias
C_WARNINGS=$(WARNINGS)

# C compiler flags
CFLAGS=$(OPT) $(ABI) $(ANSI_C_FLAG) $(C_WARNINGS) $(DEFINES) $(INCLUDES)
CFLAGS_NONANSI=$(OPT) $(ABI) $(NON_ANSI_C_FLAG) $(C_WARNINGS) $(DEFINES) \
               $(INCLUDES) 

## C++ compiler
## This part defines C++ compiler information

# C++ compiler executable
CCC=cxx

# C++ compiler ANSI/NON-ANSI flags
ANSI_C_PLUS_FLAG=
NON_ANSI_C_PLUS_FLAG=-noansi_alias
C_PLUS_WARNINGS=$(WARNINGS)

# This variable specifies how to compile the C code. If it is set to C,
# that indicates that C code will be compiled with the C++ compiler.
# Otherwise it will be compiled with C compiler.
EXT=C

# C++ compiler flags
C++FLAGS=$(OPT) $(ABI) $(ANSI_C_PLUS_FLAG) $(C_PLUS_WARNINGS) $(DEFINES) \
        $(INCLUDES)
C++FLAGS_NONANSI=$(OPT) $(ABI) $(NON_ANSI_C_PLUS_FLAG) $(C_PLUS_WARNINGS) \
                 $(DEFINES) $(INCLUDES)
# C++FLAGS_RELAXED should be set to avoid warnings reported by third party
# source code that is not maintained by PDB
C++FLAGS_RELAXED=-w $(C++FLAGS)

## Fortran compiler
## This part defines Fortran compiler information

# Fortran compiler executable
F77=f77

# Fortran compiler flags
FFLAGS=-O -u

# Additional Fortran libraries
F77LIBS=

#------------------------------------------------------------------------#

#-----Linkers section----------------------------------------------------#

# Static linking option. If not defined, dynamic linking is used.
# On OSF, static linking is not supported.
STATIC_LINKING=

# Linker flags
LDFLAGS=$(ABI) -Wl,-S

# Fortran linker
F77_LINKER=f77

#------------------------------------------------------------------------#

#-----Archiver section---------------------------------------------------#

# Archiver executable
AR=ar

# Archiver flags
AR_GETFLAGS=xv
AR_PUTFLAGS=rcvs

#------------------------------------------------------------------------#

#-----Ranlib-------------------------------------------------------------#

RANLIB=true

#------------------------------------------------------------------------#

#-----Installer----------------------------------------------------------#

INSTALL=../etc/cifinstall
INSTALLOPTS=-m 0444 

#------------------------------------------------------------------------#

#-----Stripper-----------------------------------------------------------#

STRIP=strip

#------------------------------------------------------------------------#

#-----Shell--------------------------------------------------------------#

SHELL=/bin/sh

#------------------------------------------------------------------------#
