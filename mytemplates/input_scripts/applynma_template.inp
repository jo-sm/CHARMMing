{% extends "input_scripts/generic_charmm_script.inp" %} blankme

{% block title %}Normal mode analysis{% endblock %}

{% block read_struct %}  
   {% ifequal nma 'useenm' %}
      ! Read special ENM atom types (masses are set to 0 here but will be assigned by
      ! hand in the coarsegrain stream file).
      READ RTF CARD APPEND
      * ENM specific topology information
      *

      MASS    98 CGT    0.00000 C ! Coarse grained atom type for ENM
      MASS    99 DUM    0.00000 H ! dummy atom

      End
   {% endifequal %}
   {% include 'input_scripts/read_structure.inp' %}
{% endblock %}

{% block body %} blankme
   {% ifequal nma 'useenm' %}
      ! set bomlev to -2 ONLY to avoid "missing parameter" errors
      ! that do not apply to this model.
      bomlev -2

      ! Waters do not work with ENM, delete them
      delete atom select resname TIP3 end

      ! Define CGREG to be all atoms. The stream file
      ! will delete all of these (in this case, setting the
      ! entire model to be coarse grained).
      DEFIne CGREG SELEct ALL END

      ! Define CGATS to be all of the alpha carbons. These
      ! will be the atoms that get left behind from the
      ! deletion.
      DEFIne CGATS SELEct ATOM * * CA END

      ! I've set the VDW type for a coarse-grained atom to be
      ! 98 in the custom RTF. We need to tell the stream this.
      SET cgtype 98

      ! define CG centers with appropriate mass
      STREAM /usr/local/charmming/coarsegrain.str

      ! I think CGATS needs to be reset...
      DEFIne CGATS SELEct ATOM * * CA END

      ! Set weighting to 1 for all selected coarse grained atoms. This
      ! should activate them all in the model.
      SCALar WMAIN SET 1 select CGATS end

      ! From the ENM restraints script...
      ! prior to invoking, set value @RCUT to the max distance for restraints.
      ! prior to invoking, set value @KSHORT to the near-neighbor force constant.
      ! prior to invoking, set value @KLONG to the long-range force constant.
      ! prior to invoking, set value @ADDB to nonzero to add bonds for graphics
      SET RCUT {{rcut}}
      SET KSHORT {{kshort}}
      SET KLONG {{klong}}
      SET ADDB 0

      STREAM /usr/local/charmming/enmrestraint-multi.str

      SKIP ALL EXCL RESD

   {% else %}
      ! NMA use vibran useqmmm {{ useqmmm }}
      {% if useqmmm %} blankme
         {% include "input_scripts/make_qchem.inp" %}
      {% endif %} blankme
   {% endifequal %}

   vibran nmode {{numnormalmodes}}
   diagonalize
   print norm
   open write unit 10 card name {{identifier}}-nmodes.txt
   write norm card unit 10
   * Normal mode vectors
   *

   {% if gen_trj and num_trjs %}
      ! write trajectories for the lowest {{ntrjs}} normal modes at 300K
      set n = 1
      label wrloop
      if n .gt. {{ntrjs}} then goto loopend
      open write unit 10 unform name {{identifier}}-mtraj_@n.trj
      write trajectory unit 10 mode @n temp 300.
      * Trajectory for normal mode @n
      *

      calc n = @n + 1
      goto wrloop
      label loopend
   {% endif %}

   end
{% endblock %}
