{% extends "input_scripts/generic_charmm_script.inp" %} blankme

{% block title %}Append multiple segments into a final structure{% endblock %}

{% block read_struct %} blankme
  {% if seg_list %}
     
    {% for segobj in nonhet_seg_list %}  blankme      
      {% if forloop.first %}  blankme
        ! Read PSF from file
        read psf card name {{ segobj.builtPSF }}
      {% else %}  blankme
        read psf card append name {{ segobj.builtPSF }}
      {% endif %}  blankme
    {% endfor %}  blankme
    
    {% if patch_lines %} blankme
      ! This is where we need to do disulfide and other multi-segment
      ! patching if it exists. The reason that we do it here is so we
      ! can autogen angles and dihedrals BEFORE reading in the waters.
      {{ patch_lines }}
      autogenerate angles dihedrals
    {% endif %} blankme

    {% for segobj in het_seg_list %} blankme
        read psf card append name {{ segobj.builtPSF }}
    {% endfor %} blankme

    {% for segobj in seg_list %} blankme
      {% if forloop.first %} blankme
        ! read coordinates
        read coor card name {{ segobj.builtCRD }}
      {% else %} blankme
        read coor card append name {{ segobj.builtCRD }}
      {% endif %} blankme
    {% endfor %} blankme

  {% else %}
    ! This handles the case where we read a single monolithic
    ! PDB file, such as for CG models.
    open unit 10 read card name {{ input_pdb }}
    read sequence pdb unit 10
    generate {{ finalname }} setup first none last none
    rewind unit 10
    read coor pdb unit 10
    close unit 10
  {% endif %}
{% endblock %} blankme

{% block body %} blankme

  {% if blncharge %} blankme
    stream charges.str
  {% endif %} blankme

  ! orient structure
  !! BTM, don't do this, it might muck with re-assembling the
  !! structure for redox calculations
  !coor orient

  ! calculate energy
  energy

  {% include "input_scripts/write_out_struct.inp" %}

{% endblock %} blankme

