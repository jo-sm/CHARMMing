from django import forms
from django.http import HttpResponseRedirect, HttpResponse
from django.shortcuts import render_to_response
from charmm_teach.pdbinfo.models import PDBFile, PDBFileForm 
from charmm_teach.minimization.views import append
from django.contrib.auth.models import User
from django.core import validators
from django import newforms as forms
from django.template import *
from charmm_teach.scheduler.schedInterface import schedInterface
import re
import copy
import os

#processes form data for ld simulations
def lddisplay(request):
    #chooses the file based on if it is selected or not
    try:
        file =  PDBFile.objects.filter(owner=request.user,selected='y')[0]
    except:
        return HttpResponse("Please submit a structure first.")
    os.chdir(file.location)
    #creates a list of filenames associated with the PDB
    #The "md" option takes away all -md,-ld, and -sgld names
    filename_list = file.getLimitedFileList("md")
    solv_pdb = "new_" + file.stripDotPDB(file.filename) + "-solv.pdb"
    min_pdb = "new_" + file.stripDotPDB(file.filename) + "-min.pdb"
    het_list = file.getNonGoodHetPDBList()
    tip_list = file.getGoodHetPDBList()
    protein_list = file.getProteinSegPDBList()
    seg_list = file.segids.split(' ')
    #Each checkbox or radio button on the ldform.html page has a name equal
    #to the filename it's associated with this forloop tries to get the post
    #data using the name as a key
    for i in range(len(filename_list)):
        try:
            tempid = request.POST[filename_list[i]]
        except:
	    tempid = "null"
        if(tempid!="null"):
	    #if the name is solv/min pdb, it does not need to be appended/patched
	    #otherwise reappend them
	    if(filename_list[i] != min_pdb and filename_list[i] != solv_pdb):
	        seg_list = append(request.POST,filename_list,file)
		ld_this_file = 'new_' + file.stripDotPDB(file.filename) + "-f.pdb"
                applyld(request.POST,file,seg_list,ld_this_file)
                return HttpResponse("hi")
	    else:
                applyld(request.POST,file,seg_list,filename_list[i])
                return HttpResponse("hi")
    return render_to_response('html/ldform.html', {'filename_list': filename_list,'min_pdb':min_pdb,'solv_pdb':solv_pdb, 'seg_list':seg_list,'protein_list':protein_list,'tip_list':tip_list,'het_list':het_list})

#processes form data for md simulations
def mddisplay(request):
    #chooses the file based on if it is selected or not
    try:
        file =  PDBFile.objects.filter(owner=request.user,selected='y')[0]
    except:
        return HttpResponse("Please submit a structure first.")
    os.chdir(file.location)
    temp = file.stripDotPDB(file.filename)
    #creates a list of filenames associated with the PDB
    filename_list = file.getLimitedFileList("md")
    solv_pdb = "new_" + file.stripDotPDB(file.filename) + "-solv.pdb"
    min_pdb = "new_" + file.stripDotPDB(file.filename) + "-min.pdb"
    seg_list = file.segids.split(' ')
    het_list = file.getNonGoodHetPDBList()
    tip_list = file.getGoodHetPDBList()
    protein_list = file.getProteinSegPDBList()
    done = re.compile('Done')
    for i in range(len(filename_list)):
        #First check and see if the selected choices are segids
	#Otherwise see if it is a solvated/minimized PDB
        try:
            tempid = request.POST[filename_list[i]]
	    filename = filename_list[i]
        except:
            try:
                tempid = request.POST['solv_or_min']
		filename = request.POST['solv_or_min']
            except:
                tempid = "null"
        if(tempid!="null"):
            seg_list = file.segids.split(' ')
            try:
                if(request.POST['usepatch']):
                    file.handlePatching(request.POST)
            except:
                #If there is no patch, make sure patch_name is zero
                file.patch_name = ""
                file.save()
	    if(filename != min_pdb and filename != solv_pdb):
	        seg_list = append(request.POST,filename_list,file)
		md_this_file = 'new_' + file.stripDotPDB(file.filename) + "-f.pdb"
                applymd(request.POST,file,seg_list,md_this_file)
                return HttpResponse("hi")
	    else:
                applymd(request.POST,file,seg_list,filename)
                return HttpResponse("hi")
    return render_to_response('html/mdform.html', {'filename_list': filename_list,'seg_list':seg_list,'solv_pdb':solv_pdb,'min_pdb':min_pdb,'het_list':het_list,'tip_list':tip_list,'protein_list':protein_list})

def applyld(postdata,file,seg_list,min_pdb):
    rtf_prm_dict = file.getRtfPrmPath()
    fbeta = postdata['fbeta']   
    try:
        usesgld = postdata['usesgld']
	ld_suffix = '-sgld'
    except:
        usesgld = None
	ld_suffix = '-ld'
    charmm_inp = file.makeCHARMMInputHeader('Langevin Dynamics',postdata)
    charmm_inp = charmm_inp + """

open read unit 2 card name """ + file.stripDotPDB(min_pdb) + """.psf
read psf card unit 2
close unit 2

open read unit 2 card name """ + file.stripDotPDB(min_pdb) + """.crd
read coor card unit 2
close unit 2"""

    #If the user wants to solvate implicitly the scpism line is needed
    #84 will be the scpism number in this program
    try:
        if(postdata['solvate_implicitly']):
            charmm_inp = charmm_inp + """
!Implicit solvation means there cannot be any TIP3s in the file
delete atom select resname TIP3 end
!Triggering implicit solvation
scpism uism 84
"""
    except:
        pass
    charmm_inp = charmm_inp + """

shake bonh

scal fbeta set """ + fbeta + """ sele all end

open write unit 31 card name """ + file.stripDotPDB(file.filename) + ld_suffix + """.res
open write unit 32 file name """ + file.stripDotPDB(file.filename) + ld_suffix + """.dcd
"""
    if(usesgld):
        tsgavg = postdata['tsgavg']
	tempsg = postdata['tempsg']
        charmm_inp = charmm_inp + """
	
DYNA LANG LEAP  STRT  NSTE 100 TIME 0.001  -
    IPRFRQ 10 ISVFRQ 10 IHTFRQ 0 IEQFRQ 0 INBFRQ 10 IHBFRQ 0 -
    IUNREA -1 IUNWRI 31 IUNCRD 32 IUNVEL 33 KUNIT -1 -
    NSAVC 10 NSAVV 10 NPRINT 10 ISEED 314159 -
    SGLD TSGAVG $tsgavg TEMPSG $tempsg SGFT 0.5 -
    TBATH 300   FIRST 260 -
    IASORS 0 IASVEL 1 ICHECW 0 -
    NBXMOD 5  ATOM CDIEL SHIFT VATOM VDISTANCE VSWIT -
    CUTNB 12.0  CTOFNB 10.0  CTONNB 8.0  EPS 1.0  E14FAC 1.0  WMIN 1.0
"""
    else:
        charmm_inp = charmm_inp + """

DYNA VERLET STRT(*)  NSTEP 100 TIMESTEP 0.001 -
    IUNREA -1 IUNWRI 31 IUNCRD 32 IUNVEL 33 KUNIT -1 -
    NPRINT 10 NSAVC 10 NSAVV 10 IHBFRQ 0 INBFRQ 25 ISEED 314159  -
    hbond-spec  nonbond-spec   -
    NBXMOD 5  ATOM CDIEL SHIFT VATOM VDISTANCE VSWIT -
    CUTNB 12.0  CTOFNB 10.0  CTONNB 8.0  EPS 1.0  E14FAC 1.0  WMIN 1.0 -
    TSTRUC 300.0 FIRSTT 300.0 FINALT 0.0 TEMINC 10.0   -
    IASORS 0 IASVEL 0 ISCVEL 0 ICHECW 1 TWINDH 0.0
"""
    charmm_inp = charmm_inp + """
open unit 1 card write name new_""" + file.stripDotPDB(file.filename) + ld_suffix + """.pdb
write coor pdb unit 1
* Coords
*

stop"""
    user_id = file.owner.id
    os.chdir(file.location)
    ld_filename = "charmm-" + file.stripNew(file.stripDotPDB(file.filename)) +\
                  ld_suffix + ".inp"
    inp_out = open(file.location + ld_filename,'w')
    inp_out.write(charmm_inp)
    inp_out.close()  
    #change the status of the file regarding minimization
    if(usesgld):
        file.sgld_status = "<font color=yellow>Processing</font>"
    else:
        file.ld_status = "<font color=yellow>Processing</font>"
    si = schedInterface()
    si.submitJob(user_id,file.location,ld_filename)
    if(usesgld):
        file.sgld_status = "<font color=green>Done</font>"
    else:
        file.ld_status = "<font color=green>Done</font>"
    file.save() 

#Generates MD script and runs it
def applymd(postdata,file,seg_list,min_pdb):
    charmm_inp = file.makeCHARMMInputHeader('Molecular Dynamics',postdata)
    charmm_inp = charmm_inp + """

open read unit 2 card name """ + file.stripDotPDB(min_pdb) + """.psf
read psf card unit 2
close unit 2

open read unit 2 card name """ + file.stripDotPDB(min_pdb) + """.crd
read coor card unit 2
close unit 2
"""

    #If the user wants to solvate implicitly the scpism line is needed
    #84 will be the scpism number in this program
    try:
        if(postdata['solvate_implicitly']):
            charmm_inp = charmm_inp + """
!Implicit solvation means there cannot be any TIP3s in the file
delete atom select resname TIP3 end
!Triggering implicit solvation
scpism uism 84
"""
    except:
        pass

    charmm_inp = charmm_inp + """
!image size must be determined and 10 Angstroms are added for structure buffer room
coor stat

calc xdim = abs ( ?XMAX - ?XMIN ) + 10
calc ydim = abs ( ?YMAX - ?YMIN ) + 10
calc zdim = abs ( ?ZMAX - ?ZMIN ) + 10

if @xdim .gt. @ydim
 if @xdim .gt. @ydim
  goto crystalx

if @ydim .gt. @xdim 
 if @ydim .gt. @zdim
 goto crystaly

if @zdim .gt. @ydim 
 if @zdim .gt. @xdim
  goto crystalz

label crystalx
set greatervalue @xdim
goto crystal

label crystaly
set greatervalue @ydim
goto crystal

label crystalz
set greatervalue @zdim
goto crystal

label crystal
"""
    if(file.solvation_structure == 'rhdo'):
        charmm_inp = charmm_inp + """
crystal define rhdo @greatervalue @greatervalue @greatervalue 60. 90. 60.
crystal build noper 0
"""
    else:
        charmm_inp = charmm_inp + """
crystal define cubic @greatervalue @greatervalue @greatervalue 90. 90. 90.
crystal build noper 0

"""
#    for item in seg_list:
    charmm_inp = charmm_inp +"""
image byseg sele all end"""
    charmm_inp = charmm_inp +"""

!activating a perl script from this interface that determines the values for ewald. 
!The number cannot have a prime factor other than 2,3, and 5
! the number also has to be greater than the max dimensions of the image
set perlpath "/home/rsingh/perl/calcewald.pl
set filepath """ + file.location + """
set filename """ + file.stripDotPDB(file.filename) + """"
syst @perlpath @greatervalue @filepath @filename

stream """ + file.stripDotPDB(file.filename) + """-highnum.str

shake bonh

open unit 41 write card name new_""" + file.stripDotPDB(file.filename) + """-md.res !restart file that will be written
!open unit 51 read card name dyn.rea !restart file that will be reading
open unit 31 write file name new_""" + file.stripDotPDB(file.filename) + """-md.dcd !trajectory file name"""
    #md with either be useheat or useequi
    md = postdata['md'] 
    if(md == 'useheat'):
        firstt = postdata['firstt']
	finalt = postdata['finalt']
	teminc = postdata['teminc']
	tbath = postdata['tbath']
	ihtfrq = postdata['ihtfrq']
        charmm_inp = charmm_inp + """
dyna cpt start nstep 100 timestep 0.001 iseed 11033 echeck 99999. -
    pcons pint pref 1.0 pmxx 0. pmyy 0.  pmzz 2000.  pgamma 50. -
    inbfrq 25 atom vatom cutnb 12.0 ctofnb 10. cdie eps 1. -
    ctonnb 8. vswitch cutim 12.0 imgfrq 25 wmin 1.0 -
    ewald pmew fftx @ewaldval ffty @ewaldval fftz @ewaldval  kappa .34 spline order 6 -
    iprfrq """ + ihtfrq + " ihtfrq " + ihtfrq + " ieqfrq " + ihtfrq + " ntrfrq " + ihtfrq +""" -
    iuncrd 31 iunrea -1 iunwri 41 isvfrq 1000 kunit -1 -
    nprint 10 nsavc 10 nsavv 0 ihbfrq 0 ilbfrq 0 -
    firstt """ + firstt + " finalt " + finalt + " teminc " + teminc + " tbath " + tbath + """ -
    iasors 1 iasvel 1 iscvel 0 ichecw 1 twindh 5.0 twindl -5.0"""
    else:
        temp = postdata['temp']
	charmm_inp = charmm_inp + """
dyna cpt strt nstep 100 timestep 0.001 echeck 500 - 
        pcons pint pref 1.0 pmass 2000. pgamma 0.0 -
        hoover reft """ + temp +""" tmass 20000. -
        inbfrq -1 atom vatom cutnb 12.0 ctofnb 10. cdie eps 1. -
        ctonnb 8. vswitch cutim 12.0 imgfrq -1 wmin 1.0 -
        ewald pmew fftx @ewaldval ffty @ewaldval fftz @ewaldval  kappa .34 spline order 6 -
        iprfrq 10 ihtfrq 0 ieqfrq 0 ntrfrq 10 -
        iuncrd 31 iunrea -1 iunwri 41 kunit -1 -
        nprint 10 nsavc 10 nsavv 0 ihbfrq 0 -
        firstt """ + temp + " finalt " + temp + " teminc 10.0  tbath " + temp + """ -
        iasors 1 iasvel 1 iscvel 0 ichecw 0 twindh 0.0 twindl 0.0"""
    charmm_inp = charmm_inp + """

open unit 1 card write name new_""" + file.stripDotPDB(file.filename) + """-md.pdb
write coor pdb unit 1
* Coords
*

stop"""
    user_id = file.owner.id
    os.chdir(file.location)
    md_filename = "charmm-" + file.stripDotPDB(file.filename) + "-md.inp"
    inp_out = open(file.location + md_filename,'w')
    inp_out.write(charmm_inp)
    inp_out.close()  
    #change the status of the file regarding minimization 
    file.md_status = "<font color=yellow>Processing</font>"
    si = schedInterface()
    si.submitJob(user_id,file.location,md_filename)
    file.md_status = "<font color=green>Done</font>"
    file.save()
    #Once query works, call makeJmolMovie after md_status is done
    makeJmolMovie(file,min_pdb)

#pre: Requires a file object, and the name of the psf/crd file to read in
#Jmol requires the PDB to be outputted a certain a certain way for a movie to be displayed
#it does not take DCD files
def makeJmolMovie(file,psf_filename):
    charmm_inp = """* Movie making
*

open read unit 2 card name """ + file.stripDotPDB(psf_filename) + """.psf
read psf card unit 2
close unit 2

open read unit 10 file name new_""" + file.stripDotPDB(file.filename) + """-md.dcd
traj firstu 10 skip 10

set i 1
label loop
 traj read
 open unit 1 card write name new_""" + file.stripDotPDB(file.filename) + """-movie@i.pdb
 write coor pdb unit 1
 **Cords
 *
 incr i by 1
 if i lt 11 goto loop

stop"""
    #Run the script through charmm, this is not done under job queue at the moment
    #because the PDBs must be appended together after the above script has been run.
    #Once the DAG and query stuff has been implemented, this is how the following code should
    #be changed to
    #1. Create a new field in the PDBFile object called movie_status
    #2. In the status method, check to see if movie_status is done
    #3. If it is done, call the method combinePDBsForMovie(...): right below the following code.
    movie_filename = 'charmm-md-' + file.stripDotPDB(file.filename) + '.inp'
    movie_handle = open(file.location + movie_filename,'w')
    movie_handle.write(charmm_inp)
    movie_handle.close()
    os.system('/home/rsingh/charmm/g77-xlg.one <' + movie_filename)
    combinePDBsForMovie(file)
 
#pre: Requires a PDBFile object
#Combines all the smaller PDBs make in the above method into one large PDB that
#jmol understands
def combinePDBsForMovie(file):
    ter = re.compile('TER')
    remark = re.compile('REMARK')
    #movie_handle will be the final movie created
    #mini movie is the PDBs which each time step sepearated into a new PDB
    movie_handle = open(file.location + 'new_' + file.stripDotPDB(file.filename) + "-md-mainmovie.pdb",'a')
    for i in range(10):
        i = i+1
	minimovie_handle = open(file.location +  "new_" + file.stripDotPDB(file.filename) + "-movie" + `i` + ".pdb",'r')
	movie_handle.write('MODEL ' + `i` + "\n")
	for line in minimovie_handle:
	    if(not remark.search(line) and not ter.search(line)):
	        movie_handle.write(line)
	movie_handle.write('ENDMDL\n')
	minimovie_handle.close()
	os.remove(file.location +  "new_" + file.stripDotPDB(file.filename) + "-movie" + `i` + ".pdb")
	file.md_movie_status = "Done"
	file.save()
	    
